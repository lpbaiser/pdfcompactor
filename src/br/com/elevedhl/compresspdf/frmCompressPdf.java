package br.com.elevedhl.compresspdf;

import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author leonardo
 */
public class frmCompressPdf extends javax.swing.JFrame {

    String pathPdfIn = null;
    String pathPdfOut = null;
    String namePdf = null;
    String quality = null;

    public frmCompressPdf() {
        quality = "screen";
        initComponents();
        setLocationRelativeTo(null);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icone.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        btnSelectPathI = new javax.swing.JButton();
        txtCaminhoInicial = new javax.swing.JTextField();
        btnComprimir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblAguarde = new javax.swing.JLabel();
        jcbQualidade = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compactador de PDF");

        jPanel1.setPreferredSize(new java.awt.Dimension(560, 300));

        btnSelectPathI.setBackground(new java.awt.Color(11, 119, 73));
        btnSelectPathI.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnSelectPathI.setText("Selecione o PDF");
        btnSelectPathI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPathIActionPerformed(evt);
            }
        });

        txtCaminhoInicial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        btnComprimir.setBackground(new java.awt.Color(11, 119, 73));
        btnComprimir.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnComprimir.setText("Comprimir");
        btnComprimir.setPreferredSize(new java.awt.Dimension(73, 31));
        btnComprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprimirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Qualidade");

        jcbQualidade.setBackground(new java.awt.Color(11, 119, 73));
        jcbQualidade.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jcbQualidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "72 dpi", "150 dpi", "300 dpi", "300 dpi (melhores cores)" }));
        jcbQualidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbQualidadeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("LM Sans 8", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Ferramenta compressor de arquivos pdf");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(lblAguarde)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnComprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbQualidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtCaminhoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSelectPathI)))
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectPathI)
                    .addComponent(txtCaminhoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbQualidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblAguarde)
                .addGap(30, 30, 30)
                .addComponent(btnComprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectPathIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPathIActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("Arquivos *.pdf", "pdf"));

        int option = fc.showOpenDialog(jPanel1);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                if (!validaEntradaNomes(file.getName())) {
                    JOptionPane.showMessageDialog(rootPane, "Nome do arquivo pdf não pode existir caracteres especiais e espaços!\nPor favor renomeie o arquivo e selecione-o novamente.", "Nome de arquivo não permitido", JOptionPane.ERROR_MESSAGE);
                } else {
                    pathPdfIn = file.getCanonicalPath();
                    pathPdfOut = file.getCanonicalPath();
                    namePdf = file.getName();
                }
            } catch (IOException ex) {
                Logger.getLogger(frmCompressPdf.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("Nenhum arquivo selecionado!");
        }
        if (pathPdfIn != null) {
            txtCaminhoInicial.setText(pathPdfIn);
        }
    }//GEN-LAST:event_btnSelectPathIActionPerformed

    private void btnComprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprimirActionPerformed
        btnSelectPathI.setEnabled(false);
        jcbQualidade.setEnabled(false);
        if (pathPdfIn != null && namePdf != null) {
            startCompress();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Selecione um arquivo pdf!");
        }
        btnSelectPathI.setEnabled(true);
        jcbQualidade.setEnabled(true);
    }//GEN-LAST:event_btnComprimirActionPerformed

    private void jcbQualidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbQualidadeActionPerformed
        int qualitySelected = jcbQualidade.getSelectedIndex();
        switch (qualitySelected) {
            case 0:
                this.quality = "screen";
                break;
            case 1:
                this.quality = "ebook";
                break;
            case 2:
                this.quality = "printer";
                break;
            case 3:
                this.quality = "prepress";
                break;
            default:
                this.quality = "screen";
        }
    }//GEN-LAST:event_jcbQualidadeActionPerformed

    private void startCompress() {
        Compress cp = new Compress(this.pathPdfIn, this.pathPdfOut, this.namePdf, this.quality);

        try {
            cp.compress();
            JOptionPane.showMessageDialog(rootPane, "Pdf compactado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        } catch (InterruptedException | HeadlessException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao executar compactação!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao abrir arquivo pdf, ou programa externo ghostscript não instalado!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean validaEntradaNomes(String recebeDadoDigitado) {
        Pattern padrao = Pattern.compile("[a-zA-Z0-9._-]+"); // A-Z a-z separados permitem "" (espaço)
        Matcher pesquisa = padrao.matcher(recebeDadoDigitado);
        if (pesquisa.matches()) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCompressPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCompressPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCompressPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCompressPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCompressPdf().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComprimir;
    private javax.swing.JButton btnSelectPathI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JComboBox<String> jcbQualidade;
    private javax.swing.JLabel lblAguarde;
    private javax.swing.JTextField txtCaminhoInicial;
    // End of variables declaration//GEN-END:variables

}
